type Query {
    users(query: String): [User!]!
    reviews(query: String): [Review!]!
    self: User!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createReview(data: CreateReviewInput!): Review!
    deleteReview: Review!
    updateReview(data: UpdateReviewInput!): Review!
}

# type Subscription {

# }

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}
input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreateReviewInput {
    title: String!
    body: String!
    experience: String!
    published: Boolean!
}

input DeleteReviewInput {
    title: String!
    body: String!
    experience: String!
    published: Boolean!
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    updatedAt: String!
    createdAt: String!
}

type Review {
    id: ID! @unique
    title: String!
    body: String!
    experience: String!
    published: Boolean!
    author: User!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}